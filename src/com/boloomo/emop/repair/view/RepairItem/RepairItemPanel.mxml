<?xml version="1.0" encoding="utf-8"?>
<titlewindow:blmTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							xmlns:mx="library://ns.adobe.com/flex/mx" 
							xmlns:titlewindow="com.boloomo.emop.component.titlewindow.*"
							title="修理项管理"
							creationComplete="blmtitlewindow_creationCompleteHandler(event)"
							close="blmtitlewindow_closeHandler(event)"
							width="1024" height="500" xmlns:button="com.boloomo.emop.component.button.*" xmlns:RepairItem="com.boloomo.emop.repair.view.RepairItem.*" xmlns:dropList="com.boloomo.emop.component.dropList.*" xmlns:components="com.boloomo.emop.repair.components.*">
	<fx:Script>
		<![CDATA[
			import com.boloomo.emop.component.prompt.PromptEvent;
			import com.boloomo.emop.component.prompt.promrtWindow;
			import com.boloomo.emop.repair.components.RepairItemShipButton;
			import com.boloomo.emop.repair.components.RepairItemWorkcardButton;
			import com.boloomo.emop.repair.control.RepairItemControl;
			import com.boloomo.emop.repair.model.RepairModel;
			import com.boloomo.emop.repair.type.CategoryObject;
			import com.boloomo.emop.repair.type.EquipObject;
			import com.boloomo.emop.repair.type.ItemObject;
			import com.boloomo.emop.repair.type.ShipObject;
			import com.boloomo.event.BlmEvent;
			import com.boloomo.util.AppUtil;
			import com.boloomo.util.maps.HashMap;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.HSBColor;
			
			import spark.core.NavigationUnit;	
			
			/**
			 * @author zhoucd
			 */ 
			
			private var openPanelFlag:int;//打开修理项面板的标志： 1表示新建      2 表示显示
			private var showRepairItemDetailView:RepairItemDetailPanel=null;//显示修理项详情的面板
			private var promrt:promrtWindow; //提示界面			
			private var selectedTreeNode:XML=null;//保存当前选中的树的结点
			private var currentCategory:CategoryObject=new CategoryObject();;
			private var currentItem:ItemObject=new ItemObject();
			
			//---------------------------------------------------------------------------	
			/**
			 * initialize
			 */ 
			protected function blmtitlewindow_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//				bottomGroup.addEventListener(RepairEventType.ADD_TURBINE_CARD,);			
				
				//获取修理项
				RepairModel.Instance.reqRepairItemCategory();				
			}
			
			/**
			 * 关闭处理函数
			 */ 
			protected function blmtitlewindow_closeHandler(event:CloseEvent):void
			{
				// TODO Auto-generated method stub
				PopUpManager.removePopUp(this);
				this.visible=false;
			}
			/**
			 * 新建树节点
			 */ 
			protected function addTreeLeafBtn_clickHandler(event:MouseEvent):void
			{
				itemTableGroup.visible=true;
				RepairItemTree.enabled=false;
				currentCategory.clear();
				currentCategory.cateId=selectedTreeNode.@cateID;
				currentCategory.cateName=selectedTreeNode.@label;
				
				openPanelFlag=1;//新建 
				currentItem=null;
				
				if(showRepairItemDetailView == null || showRepairItemDetailView.visible==false)
				{
					showRepairItemDetailView = RepairItemDetailPanel(PopUpManager.createPopUp(AppUtil.Instance.app,RepairItemDetailPanel,true));
				}
				//初始化showRepairItemDetailView的数据
				showRepairItemDetailView.initData(currentCategory,currentItem,openPanelFlag);
				//设置当前修理项类别
				RepairItemControl.Instance.setCurrentCategory(currentCategory.cateId);					
				showRepairItemDetailView.visible = true;
				PopUpManager.centerPopUp(showRepairItemDetailView);
				PopUpManager.bringToFront(showRepairItemDetailView);							
			}
			
			//-------------------树相关操作--------------------------------------------
			/**
			 * 树的点击事件
			 * 选中某项触发，显示相应的信息
			 */ 
			protected function RepairItemTree_itemClickHandler(event:ListEvent):void
			{			
				selectedTreeNode=XML(RepairItemTree.selectedItem);	
				if(selectedTreeNode.@level==1){
					itemTableGroup.visible=true;
					currentCategory.clear();
					currentCategory.cateId=selectedTreeNode.@cateID;
					currentCategory.cateName=selectedTreeNode.@label;
					
					//显示添加菜单,清空显示
					addTreeLeafBtn.enabled=true;
					
					//请求该目录下面的列表(如果已经存在，就不用再次从后台调用)
					var flag:Boolean=selectedTreeNode[0].hasComplexContent();
					if(!flag){
						RepairItemControl.Instance.setCurrentCategory(currentCategory.cateId);
						RepairModel.Instance.reqRepairItem(currentCategory.cateId);
					}else{//已经有内容
						itemTableArray.removeAll();	
						for each(var tempXML:XML in selectedTreeNode.children()){
							itemTableArray.addItem({category:selectedTreeNode.@label,code:tempXML.@code,name:tempXML.@name,content:tempXML.@text});
						}
						itemTableArray.refresh();
					}
				}else if(selectedTreeNode.@level==2){
					addTreeLeafBtn.enabled=false;
					itemTableGroup.visible=false;
					
					var parentNode:XML=selectedTreeNode.parent() as XML;
					currentCategory.clear();
					currentCategory.cateId=parentNode.@cateID;
					currentCategory.cateName=parentNode.@label;
					
					if(currentItem == null)
						currentItem=new ItemObject();
					else
						currentItem.clear();
					currentItem.itemId=selectedTreeNode.@code;
					currentItem.itemName=selectedTreeNode.@name;
					currentItem.content=selectedTreeNode.@text;
					
					openPanelFlag=2;//设置打开方式为 显示修理项详情
					
					if(showRepairItemDetailView == null || showRepairItemDetailView.visible==false)
					{
						showRepairItemDetailView = RepairItemDetailPanel(PopUpManager.createPopUp(AppUtil.Instance.app,RepairItemDetailPanel,true));
					}
					
					//初始化showRepairItemDetailView的数据
					showRepairItemDetailView.initData(currentCategory,currentItem,openPanelFlag);
					
					//获取该项目的详细信息 		1.设置当前修理项类别	2.设置当前修理项		3.获取修理项详细信息
					RepairItemControl.Instance.setCurrentItem(currentCategory.cateId,currentItem.itemId);
					RepairModel.Instance.reqDetailRepairItem(currentItem.itemId);					
					
					showRepairItemDetailView.visible = true;
					PopUpManager.centerPopUp(showRepairItemDetailView);
					PopUpManager.bringToFront(showRepairItemDetailView);						
				}
				
			}
			
			
			
			
			
			
			/**
			 * 在tree上面添加树结点
			 * 修改XMLLISTCOLLECTION
			 */ 
			private function addTreeNode(node:XML):void{ 
				
				selectedTreeNode=XML(RepairItemTree.selectedItem);
				selectedTreeNode[0].appendChild(node);
				RepairItemTree.expandChildrenOf(RepairItemTree.selectedItem,true);			
			}			
			/**
			 * 显示提示信息
			 * @param info 要显示的信息
			 */ 
			protected function showAlertInfo(info:String):void{
				promrt = promrtWindow(PopUpManager.createPopUp(AppUtil.Instance.app,promrtWindow,true));
				promrt.show(PromptEvent.ALERT,info);
				PopUpManager.centerPopUp(promrt);
				promrt.visible = true;
			}
			/**
			 * 显示操作成功信息
			 * @param info 要显示的信息
			 */ 
			protected function showPromptInfo(info:String):void{
				promrt = promrtWindow(PopUpManager.createPopUp(AppUtil.Instance.app,promrtWindow,true));
				promrt.show(PromptEvent.SUCCESS,info);
				PopUpManager.centerPopUp(promrt);
				promrt.visible = true;
			}
			/**
			 * 显示确认删除信息
			 * @param info 要显示的信息
			 */ 
			protected function showConfirmOperateInfo(info:String):void{
				promrt = promrtWindow(PopUpManager.createPopUp(AppUtil.Instance.app,promrtWindow,true));
				promrt.show(PromptEvent.DELALERT,info);
				PopUpManager.centerPopUp(promrt);
				promrt.visible = true;
			}
			
			//----------------------------外部调用，返回数据的处理----------------------------
			/**
			 * 初始化
			 * 加载修理项目录
			 * 设置tree的数据
			 */ 
			public function getRepairCategory(xml:XMLListCollection):void{
				repairItem=xml;
				RepairItemTree.dataProvider=repairItem.source;
				repairItem.refresh();
			}
			/**
			 * 点击目录
			 * 获取修理项列表,添加到树中
			 * @param 修理项XMLListCollection
			 */ 
			public function getRepairItemList(xmllist:XMLListCollection):void{
				itemTableArray.removeAll();
				RepairItemTree.enabled=false;				
				for(var i:int=0;i<xmllist.length;i++){
					var tempXML:XML=xmllist.getItemAt(i) as XML;
					addTreeNode(tempXML);
					itemTableArray.addItem({category:selectedTreeNode.@label,code:tempXML.@code,name:tempXML.@name,content:tempXML.@text});
				}
				itemTableArray.refresh();
				RepairItemTree.enabled=true;
			}
			/**
			 * 后台返回调用
			 * 点击树的子项
			 * 显示当前点击项的信息
			 */ 
			public function getItemInfo(item:ItemObject):void{
				currentItem=item;
				showRepairItemDetailView.setItemData(item);
			}
			//----------------树节点，Item-------------------
			/**
			 * 编辑树节点（项目Item）失败
			 * 该节点已经存在
			 */ 
			public function RepeatTreeNode():void{
				RepairItemTree.enabled=true;//恢复树的可操作性
				this.showAlertInfo("该节点已经存在！新建失败!");
			}
			/**
			 * 新建树节点（项目Item）成功
			 * 返回处理
			 */ 
			public function AddTreeNodeSuccess(xml:XML):void{							
				RepairItemTree.enabled=true;//恢复树的可操作性	
				RepairItemTree.enabled=false;		
				
				addTreeNode(xml);				
				itemTableArray.addItem({category:selectedTreeNode.@label,code:xml.@code,name:xml.@name,content:xml.@text});				
				itemTableArray.refresh();
				
				RepairItemTree.enabled=true;
				this.showPromptInfo("新建成功！");
			}
			
			/**
			 * 新建树节点（项目Item）失败
			 * 返回处理
			 */ 
			public function AddTreeNodeFail():void{
				RepairItemTree.enabled=true;//恢复树的可操作性
				this.showAlertInfo("新建发生错误，请稍后再试...");
			}
			/**
			 * 编辑树节点（项目Item）成功
			 * 返回处理
			 */ 
			public function EditTreeNodeSucess(xml:XML):void{
				
				selectedTreeNode=XML(RepairItemTree.selectedItem)
				selectedTreeNode.@label=xml.@label;
				selectedTreeNode.@code=xml.@code;
				selectedTreeNode.@name=xml.@name;
				selectedTreeNode.@level=2;	
				selectedTreeNode.@text=xml.@text;
				
				for(var i:int=0;i<itemTableArray.length;i++){
					if(itemTableArray[i].code == xml.@code){
						itemTableArray[i].name=xml.@name;
						itemTableArray[i].content=xml.@text;
					}
					
				}
				itemTableArray.refresh();
				//船舶和设备不是编辑改变的
				RepairItemTree.enabled=true;//恢复树的可操作性
				showRepairItemDetailView.editItemSuccess();
			}
			/**
			 * 编辑树节点（项目Item）失败
			 * 返回处理
			 */ 
			public function EditTreeNodeFail():void{
				showRepairItemDetailView.editItemFail();
				RepairItemTree.enabled=true;//恢复树的可操作性
			}
			/**
			 * 删除树节点（Item）失败
			 * 在 showRepairItemDetailView 显示失败信息
			 */ 
			public function DeleteRepairItemFail():void{
				showRepairItemDetailView.deleteItemFail();
			}
			/**
			 * 删除树节点（Item）成功
			 * 在树上删除结点
			 */ 
			public function DeleteRepairItemSuccess():void{
				var i:int;
				var childrenList:XMLListCollection;
				
				//------树暂时有BUG
				if(itemTableArray.length==1){//只有一个修理项，默认点击是 整个树
					childrenList=new XMLListCollection(XMLList(selectedTreeNode).children());
				}else{
					var parentNode:XML=RepairItemTree.getParentItem(RepairItemTree.selectedItem) as XML;
					childrenList=new XMLListCollection(XMLList(parentNode).children());
				}
				i=childrenList.getItemIndex(selectedTreeNode);
				childrenList.removeItemAt(i);
								
				for(i=0;i<itemTableArray.length;i++){
					if(itemTableArray[i].code == currentItem.itemId){
						itemTableArray.removeItemAt(i);
						break;
					}					
				}
				itemTableArray.refresh();
				
				showRepairItemDetailView.deleteItemSucess();
				this.showPromptInfo("删除成功！");
			}
			//----------------船舶-------------------
			/**
			 * 添加船舶 成功
			 * 
			 */ 
			public function ADDShipSucess(shipMap:HashMap):void{		
				showRepairItemDetailView.ADDShipSucess(shipMap);
			}
			/**
			 * 添加船舶 失败
			 * 
			 */ 
			public function ADDShipFail():void{
				showRepairItemDetailView.ADDShipFail();
			}
			/**
			 * 删除船舶 成功
			 * 
			 */ 
			public function DeleteShipSucess():void{	
				showRepairItemDetailView.DeleteShipSucess();
			}
			/**
			 * 批量删除船舶 成功
			 * 
			 */ 
			public function DeleteShipVecSucess(shipMap:HashMap):void{		
				showRepairItemDetailView.DeleteShipVecSucess(shipMap);
			}
			/**
			 * 删除船舶 失败
			 * 
			 */ 
			public function DeleteShipFail():void{
				showRepairItemDetailView.DeleteShipFail();
			}
			//----------------设备-------------------
			/**
			 * 新建设备成功
			 * 
			 */ 
			public function ADDEquipSucess(equip:EquipObject):void{	
				showRepairItemDetailView.ADDEquipSucess(equip);
			}
			/**
			 * 新建设备 失败
			 * 
			 */ 
			public function ADDEquipFail():void{
				showRepairItemDetailView.ADDEquipFail();
			}
			/**
			 * 删除设备成功
			 * 
			 */ 
			public function DelEquipSucess():void{		
				showRepairItemDetailView.DelEquipSucess();
			}
			/**
			 * 删除设备 失败
			 * 
			 */ 
			public function DelEquipFail():void{
				showRepairItemDetailView.DelEquipFail();
			}
			//----------------工作卡-------------------
			/**
			 * 传递获取到的工作卡列表
			 */ 
			public function SendWorkCards(tempHash:HashMap):void{
				showRepairItemDetailView.SendWorkCards(tempHash);
			}
			/**
			 * 新建工作卡 成功
			 * 获取所有的工作卡，然后更新
			 */ 
			public function ADDWorkCardSucess(workCardMap:HashMap):void{
				showRepairItemDetailView.ADDWorkCardSucess(workCardMap);
			}
			/**
			 * 新建工作卡 失败
			 * 
			 */ 
			public function ADDWorkCardFail():void{
				showRepairItemDetailView.ADDWorkCardFail();
			}
			/**
			 * 删除工作卡成功
			 * 
			 */ 
			public function DelWorkCardSucess(workCardMap:HashMap):void{	
				showRepairItemDetailView.DelWorkCardSucess(workCardMap);
			}
			/**
			 * 删除工作卡 失败
			 * 
			 */ 
			public function DelWorkCardFail():void{
				showRepairItemDetailView.DelWorkCardFail();
			}
			
			/**
			 * 表格双击函数
			 */ 
			protected function itemTable_doubleClickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				addTreeLeafBtn.enabled=false;				
				if(currentItem == null)
					currentItem=new ItemObject();
				else
					currentItem.clear();
				currentItem.itemId=event.target.data.code;
				currentItem.itemName=event.target.data.name;
				currentItem.content=event.target.data.content;
				
				openPanelFlag=2;//设置打开方式为 显示修理项详情
				
				if(showRepairItemDetailView == null || showRepairItemDetailView.visible==false)
				{
					showRepairItemDetailView = RepairItemDetailPanel(PopUpManager.createPopUp(AppUtil.Instance.app,RepairItemDetailPanel,true));
				}
				
				//初始化showRepairItemDetailView的数据
				showRepairItemDetailView.initData(currentCategory,currentItem,openPanelFlag);
				
				//获取该项目的详细信息 		1.设置当前修理项类别	2.设置当前修理项		3.获取修理项详细信息
				RepairItemControl.Instance.setCurrentItem(currentCategory.cateId,currentItem.itemId);
				RepairModel.Instance.reqDetailRepairItem(currentItem.itemId);					
				
				showRepairItemDetailView.visible = true;
				PopUpManager.centerPopUp(showRepairItemDetailView);
				PopUpManager.bringToFront(showRepairItemDetailView);	
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>	
		<s:XMLListCollection id="repairItem">
			<fx:XMLList xmlns="">				
			</fx:XMLList>
		</s:XMLListCollection>
		<s:ArrayCollection id="itemTableArray">			
		</s:ArrayCollection>
	</fx:Declarations>
	<mx:Canvas left="0" top="0" bottom="0" width="350" backgroundColor="0xF0F3F5">
		<s:Group id="addItemGroupView" left="0" right="0" bottom="0" height="30">
			<button:blmAddButton id="addTreeLeafBtn" left="10" width="20" height="20" enabled="false"
								 verticalCenter="0" click="addTreeLeafBtn_clickHandler(event)"/>
		</s:Group>
		<mx:Tree id="RepairItemTree" left="0" right="0" top="0" bottom="30" contentBackgroundAlpha="0"
				 itemClick="RepairItemTree_itemClickHandler(event)"
				 itemRenderer="com.boloomo.emop.repair.view.RepairItem.RepairTreeItemRenderer"
				 labelField="@label">
		</mx:Tree>
	</mx:Canvas>
	<s:Group id="itemTableGroup" left="350" right="0" top="0" bottom="0" visible="false">
		<mx:DataGrid id="itemTable" left="10" right="10" top="10" bottom="10" 
					 doubleClickEnabled="true" doubleClick="itemTable_doubleClickHandler(event)"
					 verticalScrollPolicy="auto" dataProvider="{itemTableArray}" 
					 textAlign="center" verticalGridLines="false"> 
			<mx:columns> 
				<mx:DataGridColumn headerText="类型" dataField="category" textAlign="center" width="70" /> 			
				<mx:DataGridColumn headerText="代码" dataField="code" textAlign="center" width="50" /> 			
				<mx:DataGridColumn headerText="名称" dataField="name" textAlign="center" /> 		
				<mx:DataGridColumn headerText="内容" dataField="content" textAlign="left"/>
			</mx:columns>	
		</mx:DataGrid>
	</s:Group>
</titlewindow:blmTitleWindow>

